/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */

import jspb, { Message, BinaryReader, BinaryWriter } from 'google-protobuf';
var goog = jspb;
var global = Function('return this')();

import google_protobuf_timestamp_pb from 'google-protobuf/google/protobuf/timestamp_pb.js';
goog.exportSymbol('proto.uss.Game', null, global);
goog.exportSymbol('proto.uss.Player', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uss.Game = function(opt_data) {
  Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uss.Game, Message);
if (goog.DEBUG && !COMPILED) {
  proto.uss.Game.displayName = 'proto.uss.Game';
}


if (Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.uss.Game.prototype.toObject = function(opt_includeInstance) {
  return proto.uss.Game.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uss.Game} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uss.Game.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: Message.getFieldWithDefault(msg, 1, ""),
    player1: (f = msg.getPlayer1()) && proto.uss.Player.toObject(includeInstance, f),
    player2: (f = msg.getPlayer2()) && proto.uss.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uss.Game}
 */
proto.uss.Game.deserializeBinary = function(bytes) {
  var reader = new BinaryReader(bytes);
  var msg = new proto.uss.Game;
  return proto.uss.Game.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uss.Game} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uss.Game}
 */
proto.uss.Game.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.uss.Player;
      reader.readMessage(value,proto.uss.Player.deserializeBinaryFromReader);
      msg.setPlayer1(value);
      break;
    case 3:
      var value = new proto.uss.Player;
      reader.readMessage(value,proto.uss.Player.deserializeBinaryFromReader);
      msg.setPlayer2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uss.Game.prototype.serializeBinary = function() {
  var writer = new BinaryWriter();
  proto.uss.Game.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uss.Game} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uss.Game.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayer1();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.uss.Player.serializeBinaryToWriter
    );
  }
  f = message.getPlayer2();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.uss.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ID = 1;
 * @return {string}
 */
proto.uss.Game.prototype.getId = function() {
  return /** @type {string} */ (Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.uss.Game.prototype.setId = function(value) {
  Message.setProto3StringField(this, 1, value);
};


/**
 * optional Player Player1 = 2;
 * @return {?proto.uss.Player}
 */
proto.uss.Game.prototype.getPlayer1 = function() {
  return /** @type{?proto.uss.Player} */ (
    Message.getWrapperField(this, proto.uss.Player, 2));
};


/** @param {?proto.uss.Player|undefined} value */
proto.uss.Game.prototype.setPlayer1 = function(value) {
  Message.setWrapperField(this, 2, value);
};


proto.uss.Game.prototype.clearPlayer1 = function() {
  this.setPlayer1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.uss.Game.prototype.hasPlayer1 = function() {
  return Message.getField(this, 2) != null;
};


/**
 * optional Player Player2 = 3;
 * @return {?proto.uss.Player}
 */
proto.uss.Game.prototype.getPlayer2 = function() {
  return /** @type{?proto.uss.Player} */ (
    Message.getWrapperField(this, proto.uss.Player, 3));
};


/** @param {?proto.uss.Player|undefined} value */
proto.uss.Game.prototype.setPlayer2 = function(value) {
  Message.setWrapperField(this, 3, value);
};


proto.uss.Game.prototype.clearPlayer2 = function() {
  this.setPlayer2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.uss.Game.prototype.hasPlayer2 = function() {
  return Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uss.Player = function(opt_data) {
  Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uss.Player, Message);
if (goog.DEBUG && !COMPILED) {
  proto.uss.Player.displayName = 'proto.uss.Player';
}


if (Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.uss.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.uss.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uss.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uss.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: Message.getFieldWithDefault(msg, 1, ""),
    x: Message.getFieldWithDefault(msg, 2, 0),
    y: Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uss.Player}
 */
proto.uss.Player.deserializeBinary = function(bytes) {
  var reader = new BinaryReader(bytes);
  var msg = new proto.uss.Player;
  return proto.uss.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uss.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uss.Player}
 */
proto.uss.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uss.Player.prototype.serializeBinary = function() {
  var writer = new BinaryWriter();
  proto.uss.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uss.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uss.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.uss.Player.prototype.getName = function() {
  return /** @type {string} */ (Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.uss.Player.prototype.setName = function(value) {
  Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 X = 2;
 * @return {number}
 */
proto.uss.Player.prototype.getX = function() {
  return /** @type {number} */ (Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.uss.Player.prototype.setX = function(value) {
  Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 Y = 3;
 * @return {number}
 */
proto.uss.Player.prototype.getY = function() {
  return /** @type {number} */ (Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.uss.Player.prototype.setY = function(value) {
  Message.setProto3IntField(this, 3, value);
};

export const Game = proto.uss.Game;

export default proto.uss;
